// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesWatchlist.Data;

#nullable disable

namespace MoviesWatchlist.Data.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20230728075943_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Hugo",
                            LastName = "Weaving",
                            Nationality = "British"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Shia",
                            LastName = "LaBeouf",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Megan",
                            LastName = "Fox",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Tyrese",
                            LastName = "Gibson",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Joshua",
                            LastName = "Duhamel",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "John",
                            LastName = "Turturro",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Mark",
                            LastName = "Wahlberg",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Stanley",
                            LastName = "Tucci",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Anthony",
                            LastName = "Hopkins",
                            Nationality = "Welsh"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Hailee",
                            LastName = "Steinfeld",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "John",
                            LastName = "Cena",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "John",
                            LastName = "Ortiz",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 13,
                            FirstName = "Anthony",
                            LastName = "Ramos",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 14,
                            FirstName = "Dominique",
                            LastName = "Fishback",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 15,
                            FirstName = "Robert",
                            LastName = "Downey Jr.",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 16,
                            FirstName = "Terrence",
                            LastName = "Howard",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 17,
                            FirstName = "Gwyneth",
                            LastName = "Paltrow",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 18,
                            FirstName = "Scarlett",
                            LastName = "Johansson",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 19,
                            FirstName = "Samuel",
                            LastName = "Jackson",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 20,
                            FirstName = "Tom",
                            LastName = "Holland",
                            Nationality = "English"
                        },
                        new
                        {
                            Id = 21,
                            FirstName = "Michael",
                            LastName = "Keaton",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 22,
                            FirstName = "Zendaya",
                            LastName = "Coleman",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 23,
                            FirstName = "Jacob",
                            LastName = "Batalon",
                            Nationality = "American"
                        });
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Michael",
                            LastName = "Bay",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Travis",
                            LastName = "Knight",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Steven",
                            LastName = "Caple Jr.",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Jonathan",
                            LastName = "Favreau",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Jonathan",
                            LastName = "Watts",
                            Nationality = "American"
                        });
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 12,
                            Name = "War and military"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Martial arts"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.IdentityUserMovie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "CollectorId");

                    b.HasIndex("CollectorId");

                    b.ToTable("IdentityUsersMovies");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<decimal>("Rating")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.MovieActor", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MoviesActors");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.MovieGenre", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MoviesGenres");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.MovieWriter", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "WriterId");

                    b.HasIndex("WriterId");

                    b.ToTable("MoviesWriters");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Writer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Writers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Roberto",
                            LastName = "Orci",
                            Nationality = "Mexican-American"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Alex",
                            LastName = "Kurtzman",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "John",
                            LastName = "Rogers",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Ehren",
                            LastName = "Kruger",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Ken",
                            LastName = "Nolan",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Art",
                            LastName = "Marcum",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Matt",
                            LastName = "Holloway",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Christina",
                            LastName = "Hodson",
                            Nationality = "British"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Mark",
                            LastName = "Fergus",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Hawk",
                            LastName = "Ostby",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "Justin",
                            LastName = "Theroux",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "Chris",
                            LastName = "McKenna",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 13,
                            FirstName = "Erik",
                            LastName = "Sommers",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 14,
                            FirstName = "Jonathan",
                            LastName = "Goldstein",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 15,
                            FirstName = "John",
                            LastName = "Daley",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 16,
                            FirstName = "Christopher",
                            LastName = "Ford",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 17,
                            FirstName = "Joby",
                            LastName = "Harold",
                            Nationality = "English"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesWatchlist.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.IdentityUserMovie", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.AppUser", "Collector")
                        .WithMany("IdentityUsersMovies")
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesWatchlist.Data.Models.Movie", "Movie")
                        .WithMany("IdentityUsersMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collector");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Movie", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.MovieActor", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.Actor", "Actor")
                        .WithMany("MoviesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesWatchlist.Data.Models.Movie", "Movie")
                        .WithMany("MoviesActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.MovieGenre", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.Genre", "Genre")
                        .WithMany("MoviesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesWatchlist.Data.Models.Movie", "Movie")
                        .WithMany("MoviesGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.MovieWriter", b =>
                {
                    b.HasOne("MoviesWatchlist.Data.Models.Movie", "Movie")
                        .WithMany("MoviesWriters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesWatchlist.Data.Models.Writer", "Writer")
                        .WithMany("MoviesWriters")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Actor", b =>
                {
                    b.Navigation("MoviesActors");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.AppUser", b =>
                {
                    b.Navigation("IdentityUsersMovies");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Genre", b =>
                {
                    b.Navigation("MoviesGenres");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Movie", b =>
                {
                    b.Navigation("IdentityUsersMovies");

                    b.Navigation("MoviesActors");

                    b.Navigation("MoviesGenres");

                    b.Navigation("MoviesWriters");
                });

            modelBuilder.Entity("MoviesWatchlist.Data.Models.Writer", b =>
                {
                    b.Navigation("MoviesWriters");
                });
#pragma warning restore 612, 618
        }
    }
}
